<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="$(arg robot_model)_robot">
  <!--
    This is a top-level xacro instantiating the Gazebo-specific version of the
    'ur_robot' macro (ie: 'ur_robot_gazebo') and passing it values for all its
    required arguments.

    This file should be considered the Gazebo-specific variant of the file
    with the same name in the ur_description package. It accepts the same
    arguments, but instead of configuring everything for a real robot, will
    generate a Gazebo-compatible URDF with a ros_control hardware_interface
    attached to it.

    Only use this top-level xacro if you plan on spawning the robot in Gazebo
    'by itself', without any gripper or any other geometry attached.

    If you need to attach an end-effector, camera or need to integrate the
    robot into a larger workcell and want to spawn that as a single entity in
    Gazebo, DO NOT EDIT THIS FILE.

    Instead: create a new top-level xacro, give it a proper name, include the
    required '.xacro' files, instantiate the models (ie: call the macros) and
    connect everything by adding the appropriate joints.
  -->

  <!--
    Import main macro.

    NOTE: this imports the Gazebo-wrapper main macro, NOT the regular
          xacro macro (which is hosted by ur_description).
  -->
  <xacro:include filename="$(find ur_gazebo)/urdf/ur_macro.xacro"/>

  <!--Declare arguments -->
  <xacro:arg name="joint_limit_params" default=""/>
  <xacro:arg name="physical_params" default=""/>
  <xacro:arg name="kinematics_params" default=""/>
  <xacro:arg name="visual_params" default=""/>
  <!--
    legal values:
      - hardware_interface/PositionJointInterface
      - hardware_interface/VelocityJointInterface
      - hardware_interface/EffortJointInterface

    NOTE: this value must correspond to the controller configured in the
          controller .yaml files in the 'config' directory.
  -->
  <xacro:arg name="transmission_hw_interface" default="hardware_interface/EffortJointInterface"/>
  <xacro:arg name="safety_limits" default="false"/>
  <xacro:arg name="safety_pos_margin" default="0.15"/>
  <xacro:arg name="safety_k_position" default="20"/>

  <!-- Instantiate the Gazebo robot and pass it all the required arguments. -->
  <xacro:ur_robot_gazebo
    prefix=""
    joint_limits_parameters_file="$(arg joint_limit_params)"
    kinematics_parameters_file="$(arg kinematics_params)"
    physical_parameters_file="$(arg physical_params)"
    visual_parameters_file="$(arg visual_params)"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="$(arg safety_limits)"
    safety_pos_margin="$(arg safety_pos_margin)"
    safety_k_position="$(arg safety_k_position)"
  />

  <!--
    Attach the Gazebo model to Gazebo's world frame.

    Note: if you're looking to integrate a UR into a larger scene and need
    to add EEFs or other parts, DO NOT change this file or the 'world' link
    here. Create a NEW xacro instead and decide whether you need to add
    a 'world' link there.
  -->
  
  <xacro:property name="pedestal_base_height" value="0.845"/>
  <xacro:property name="pedestal_base_width" value="0.07"/>

  <xacro:property name="pedestal_connector_width" value="0.165"/>
  <xacro:property name="pedestal_connector_height" value="0.013"/>
   
   
  <!--
  <link name="pedestal_base">
    <inertial>
      <origin xyz="0 0 ${pedestal_base_height/2}" rpy="0 0 0"/>
      <mass value="20"/>
      <inertia ixx="200" ixy="200" ixz="200" iyy="200" iyz="200" izz="200"/>
    </inertial>
    <visual>
      <origin xyz="0 0 ${pedestal_base_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${pedestal_base_width} ${pedestal_base_width} ${pedestal_base_height}"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 ${pedestal_base_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${pedestal_base_width} ${pedestal_base_width} ${pedestal_base_height}"/>
      </geometry>
    </collision>
  </link>

  <link name="pedestal_connector">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="20"/>
      <inertia ixx="200" ixy="200" ixz="200" iyy="200" iyz="200" izz="200"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${pedestal_connector_width} ${pedestal_connector_width} ${pedestal_connector_height}"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${pedestal_connector_width} ${pedestal_connector_width} ${pedestal_connector_height}"/>
      </geometry>
    </collision>
  </link>-->
  
  <link name="world"/>
  
  <!--
  <joint name="world_joint" type="fixed">
    <parent link="world"/>
    <child link="pedestal_base"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>-->
  
  <!--<joint name="pedestal_joint" type="fixed">
    <parent link="pedestal_base" />
    <child link="pedestal_connector" />
    <origin xyz="0 0 ${pedestal_base_height}" rpy="0.0 0.0 0.0"/>
  </joint>

  <joint name="base_joint" type="fixed">
    <parent link="pedestal_connector" />
    <child link="base_link" />
    <origin xyz="0 0 ${pedestal_connector_height/2}" rpy="0.0 0.0 0.0"/>
  </joint>-->
  
  <link name="pedestal">
    <inertial>
      <origin xyz="0 0 ${pedestal_base_height/2}" rpy="0 0 0"/>
      <mass value="20"/>
      <inertia ixx="200" ixy="200" ixz="200" iyy="200" iyz="200" izz="200"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="package://ur5_control/meshes/b75_pedestal.dae"/>
      </geometry>
      <material name="Gray">
        <color rgba="0.5 0.5 0.5 1"/>
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 ${pedestal_base_height/2}" rpy="0 0 0"/>
      <geometry>
        <box size="${pedestal_base_width} ${pedestal_base_width} ${pedestal_base_height}"/>
      </geometry>
    </collision>
  </link>
  
  <joint name="world_joint" type="fixed">
    <parent link="world" />
    <child link="pedestal" />
    <origin xyz="0 0 0" rpy="0.0 0.0 0.0"/>
  </joint>

  <joint name="base_joint" type="fixed">
    <parent link="pedestal" />
    <child link="base_link" />
    <origin xyz="0 0 ${pedestal_base_height}" rpy="0.0 0.0 0.0"/>
  </joint>

  <link name="tool0_controller"/>
  <joint name="tool_controller_fake_joint" type="fixed">
    <parent link="tool0"/>
    <child link="tool0_controller"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>
  
  <xacro:property name="camera_link" value="0.05" />
  
  <!-- Camera -->
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="${camera_link} ${camera_link} ${camera_link}"/>
      </geometry>
      <material name="red"/>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>
  
  <joint name="camera_joint" type="fixed">
    <axis xyz="0 1 0" />
    <origin xyz="0 0 0" rpy="0 ${(3*pi)/2} ${(3*pi)/2}"/>
    <parent link="tool0_controller"/>
    <child link="camera_link"/>
  </joint>
  
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>10.0</update_rate>
      <visualize>true</visualize>
      <camera name="head">
        <horizontal_fov>${(pi/180) * 59.6}</horizontal_fov>
        <image> 
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>500</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.000</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  
</robot>
